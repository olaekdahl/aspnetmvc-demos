//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdventureWorks.Models.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AdventureWorksContext : DbContext
    {
        public AdventureWorksContext()
            : base("name=AdventureWorksContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductSubcategory> ProductSubcategories { get; set; }
    
        public virtual ObjectResult<byte[]> GetPhoto(Nullable<int> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("GetPhoto", pidParameter);
        }
    
        public virtual ObjectResult<byte[]> GetPhoto2(Nullable<int> pid)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("GetPhoto2", pidParameter);
        }
    
        public virtual int AddEmployee(string nationalIDNumber, string loginID, string firstName, string lastName, string jobTitle, Nullable<System.DateTime> birthDate, string maritalStatus, string gender, Nullable<System.DateTime> hireDate, Nullable<bool> salariedFlag, Nullable<short> vacationHours, Nullable<short> sickLeaveHours)
        {
            var nationalIDNumberParameter = nationalIDNumber != null ?
                new ObjectParameter("NationalIDNumber", nationalIDNumber) :
                new ObjectParameter("NationalIDNumber", typeof(string));
    
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var salariedFlagParameter = salariedFlag.HasValue ?
                new ObjectParameter("SalariedFlag", salariedFlag) :
                new ObjectParameter("SalariedFlag", typeof(bool));
    
            var vacationHoursParameter = vacationHours.HasValue ?
                new ObjectParameter("VacationHours", vacationHours) :
                new ObjectParameter("VacationHours", typeof(short));
    
            var sickLeaveHoursParameter = sickLeaveHours.HasValue ?
                new ObjectParameter("SickLeaveHours", sickLeaveHours) :
                new ObjectParameter("SickLeaveHours", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEmployee", nationalIDNumberParameter, loginIDParameter, firstNameParameter, lastNameParameter, jobTitleParameter, birthDateParameter, maritalStatusParameter, genderParameter, hireDateParameter, salariedFlagParameter, vacationHoursParameter, sickLeaveHoursParameter);
        }
    
        public virtual ObjectResult<Product> Search(string searchTerm)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("Search", searchTermParameter);
        }
    
        public virtual ObjectResult<Product> Search(string searchTerm, MergeOption mergeOption)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("searchTerm", searchTerm) :
                new ObjectParameter("searchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product>("Search", mergeOption, searchTermParameter);
        }
    }
}
